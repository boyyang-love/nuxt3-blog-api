// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"
	"time"

	blog "blog_backend/internal/handler/blog"
	categories "blog_backend/internal/handler/categories"
	comment "blog_backend/internal/handler/comment"
	email "blog_backend/internal/handler/email"
	link "blog_backend/internal/handler/link"
	member "blog_backend/internal/handler/member"
	minio "blog_backend/internal/handler/minio"
	search "blog_backend/internal/handler/search"
	tag "blog_backend/internal/handler/tag"
	upload "blog_backend/internal/handler/upload"
	user "blog_backend/internal/handler/user"
	"blog_backend/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/blog/list",
				Handler: blog.ListBlogHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/blog/search/id",
				Handler: blog.SearchBlogByIdHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/blog/search/ids",
				Handler: blog.SearchBlogByIdsHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/blog/search/userid",
				Handler: blog.SearchBlogByUserIdHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/blog/create",
				Handler: blog.CreateBlogHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/blog/delete",
				Handler: blog.DeleteBlogHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/blog/update",
				Handler: blog.UpdateBlogHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/categories/info",
				Handler: categories.InfoCategoryHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/categories/create",
				Handler: categories.CreateCategoryHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/categories/delete",
				Handler: categories.DeleteCategoryHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/categories/update",
				Handler: categories.UpdateCategoryHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/comment/create",
				Handler: comment.CreateCommentHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/comment/delete",
				Handler: comment.DeleteCommentHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/comment/list",
				Handler: comment.ListCommentHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/email/code",
				Handler: email.SendCodeHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/link/create",
				Handler: link.CreateLinkHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/link/delete",
				Handler: link.DeleteLinkHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/link/list",
				Handler: link.ListLinkHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/link/status/update",
				Handler: link.UpdateStatusLinkHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/link/update",
				Handler: link.UpdateLinkHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/user/signin",
				Handler: member.SignInHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/signup",
				Handler: member.SignUpHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/bucket/create",
				Handler: minio.CreateBucketHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/bucket/delete",
				Handler: minio.DeleteBucketHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/search",
				Handler: search.KeywordsSearchHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/search/category/id",
				Handler: search.CategoryIdSearchHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/tag/list/userid",
				Handler: tag.ListTagByUserIdHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/tag/create",
				Handler: tag.CreateTagHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/tag/delete",
				Handler: tag.DeleteTagHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/tag/list",
				Handler: tag.ListTagHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/tag/update",
				Handler: tag.UpdateTagHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/file/list/public",
				Handler: upload.FileInfoPublicHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/file/delete",
				Handler: upload.FileDeleteHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/file/list",
				Handler: upload.FileListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/file/status",
				Handler: upload.FileStatusHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/file/upload",
				Handler: upload.FileUploadHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/minio/file/upload",
				Handler: upload.FileUploadMinioHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
		rest.WithTimeout(240000*time.Millisecond),
		rest.WithMaxBytes(20971520),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/user/info",
				Handler: user.InfoUserHandler(serverCtx),
			},
		},
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/user/update",
				Handler: user.UpdateUserHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/update/password",
				Handler: user.UpdateUserPasswordHandler(serverCtx),
			},
		},
		rest.WithJwt(serverCtx.Config.Auth.AccessSecret),
	)
}
