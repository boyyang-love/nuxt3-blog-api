syntax = "v1"

import "./base.api"

type (
    CreateBlogReq {
        Title string `json:"title"`
        Des string `json:"des"`
        Cover string `json:"cover"`
        Content string `json:"content"`
        Tags []uint `json:"tags,optional"`
    }
    CreateBlogRes {
        Base
        Data CreateBlogResData `json:"data"`
    }
    CreateBlogResData {
        Id uint `json:"id"`
    }
)

type (
    UpdateBlogReq {
        Id uint `json:"id"`
        Title string `json:"title"`
        Des string `json:"des"`
        Cover string `json:"cover"`
        Content string `json:"content"`
        Tags []uint `json:"tags,optional"`
    }
    UpdateBlogRes {
        Base
    }
)

type (
    DeleteBlogReq {
        Id uint `json:"id"`
    }
    DeleteBlogRes {
        Base
    }
)

type (
    ListBlogReq {
        Page int `form:"page"`
        Limit int `form:"limit"`
        Type string `form:"type,optional,options=[top,recently,created]"`
    }
    ListBlogRes {
        Base
        Data ListBlogResData `json:"data"`
    }
    ListBlogResData {
        Count int64 `json:"count"`
        List []ListBlogItem `json:"list"`
    }
    ListBlogItem {
        Id uint `json:"id"`
        Uid string `json:"uid"`
        Created int64 `json:"created"`
        Updated int64 `json:"updated"`
        Title string `json:"title"`
        Des string `json:"des"`
        Cover string `json:"cover"`
        Content string `json:"content"`
        UserId uint `json:"user_id"`
        // 关系
        User BlogUserInfo `json:"user" gorm:"column:User;reference:UserId"`
        Tag []*BlogTags `json:"tag" gorm:"column:Tag;many2many:article_tag"`
        Comment []BlogComments `json:"comment" gorm:"column:Comment"`
    }
    BlogUserInfo {
        Id uint `json:"id"`
        Username string `json:"username"`
        Avatar string `json:"avatar"`
        Motto string `json:"motto"`
    }
    BlogTags {
        Id uint `json:"id" json:"id"`
        Uid string `json:"uid"`
        TagName string `json:"tag_name""`
        Type string `json:"type"`
    }
    BlogComments {
        Id uint `json:"id"`
        Created int `json:"created"`
        Content string `json:"content"`
        ArticleId uint `json:"article_id"`
        CommentId uint `json:"comment_id"`
        WebsiteUserId uint `json:"website_user_id"`
        UserId uint `json:"user_id"`
        Type string `json:"type"`
        User BlogCommentsUserInfo `json:"user"`
    }
    BlogCommentsUserInfo {
        Id uint `json:"id"`
        Uid string `json:"uid"`
        Username string `json:"username"`
        Avatar string `json:"avatar"`
    }
    BlogSearchByIdReq {
        Id uint `form:"id"`
    }
    BlogSearchByIdRes {
        Base
        Data BlogSearchByIdResData `json:"data"`
    }
    BlogSearchByIdResData {
        Info ListBlogItem `json:"info"`
    }
    BlogSearchByIdsReq {
        Ids []uint `json:"ids"`
    }
    BlogSearchByIdsRes {
        Base
        Data BlogSearchByIdsResData `json:"data"`
    }
    BlogSearchByIdsResData {
        Info []BlogSearchByIdsListInfo `json:"info"`
    }
    BlogSearchByIdsListInfo {
        Id uint `json:"id"`
        Uid string `json:"uid"`
        Title string `json:"title"`
        Des string `json:"des"`
        Cover string `json:"cover"`
    }
)

@server(
    group: blog
)
service blog_backend {
    @handler ListBlog
    get /blog/list (ListBlogReq) returns (ListBlogRes)

    @handler SearchBlogById
    get /blog/search/id (BlogSearchByIdReq) returns (BlogSearchByIdRes)

    @handler SearchBlogByIds
    post /blog/search/ids (BlogSearchByIdsReq) returns (BlogSearchByIdsRes)
}

@server(
    jwt: Auth
    group: blog
)
service blog_backend {
    @handler CreateBlog
    post /blog/create (CreateBlogReq) returns (CreateBlogRes)

    @handler UpdateBlog
    post /blog/update (UpdateBlogReq) returns (UpdateBlogRes)

    @handler DeleteBlog
    post /blog/delete (DeleteBlogReq) returns (DeleteBlogRes)
}

